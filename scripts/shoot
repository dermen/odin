#!/usr/bin/env python

"""
Simulate the scattering experiment (SAXS, WAXS).
"""

import multiprocessing

from mdtraj import trajectory
from odin import xray, structure
from odin.utils import odinparser

import numpy as np


def main(traj, num_shots, num_molecules, detector, traj_weights=None, device_id=0):
    shotset = xray.Shotset.simulate(traj, num_molecules, detector, num_shots, traj_weights=None, device_id=device_id)    
    return shotset
    
def save(output_file, shotset):
    shotset.save(output_file)
    print "Wrote: %s" % output_file
    return 
    
if __name__ == '__main__':
    
    parser = odinparser('Simulate a scattering experiment, generating a `shot`.')

    parser.add_argument('-s', '--structures', type=str,
                        help='''A a PDB, coor, or trajectory file (.lh5 only 
                        right now), defining the molecular geometrie(s) to shoot.''')
    parser.add_argument('-n', '--numshots', type=int, default=1,
                        help='Number of shots (experiments) to perform.')
    parser.add_argument('-m', '--nummolec', type=int, default=1200,
                        help='Number of molecules in each shot. Default: 1200')
    parser.add_argument('-d', '--detector', type=str, default='NONE',
                        help='''A Detector object, on disk. Default: generate a 
                        generic detector.''')
    parser.add_argument('-w', '--weights', type=str, default='NONE',
                        help='''A flat text file specifing the ensemble weights 
                        for each snapshot in the trajectory. Places snapshots in 
                        to the `experiment` with the appropriate weight. Default:
                        None (even weights). ''')
    parser.add_argument('-p', '--parallel', type=int, default=1,
                        help='''Number of local GPUs to employ in parallel. 
                        Will use device IDs 0, 1, ..., p-1. Default: Device 0 
                        only.''')
    parser.add_argument('-o', '--output', default='shotset.shot',
                        help='A Shotset object, written to disk in h5 format. Default: shotset.shot')

    args = parser.parse_args()
    
    # load up filenames
    if args.structures.endswith('.coor') or args.structures.endswith('.xyz'):
        traj = structure.load_coor(args.structures)
    else:
        traj = trajectory.load(args.structures)
    
    if args.detector != 'NONE':
        detector = xray.Detector.load(args.detector)
    else:
        detector = xray.Detector.generic()
        
    if args.weights == 'NONE':
        weights = None
    else:
        if traj.n_frames == 1:
            raise ValueError('You can\'t weight a single snapshot, silly!')
        
    # deal w/parallel
    if args.parallel == 1:
        shotset = main(traj, args.numshots, args.nummolec, detector, args.output, weights)
    else:
        p = args.parallel
        gpudev = range(p)
        print "Running on GPU Devices:", gpudev
        
        pool = Pool(processes=p)
        main_args = zip([traj], 
                        [args.numshots]*p, 
                        [args.nummolec]*p,
                        [detector]*p,
                        [weights]*p,
                        gpudev)
        shotsets = pool.map(main, main_args)
    
        # aggregate all the shotsets into one
        s = []
        for shotset in shotsets:
            s.extend( shotset.shots )
        shotset = xray.Shotset(s)
        
    save(args.output, shotset)

